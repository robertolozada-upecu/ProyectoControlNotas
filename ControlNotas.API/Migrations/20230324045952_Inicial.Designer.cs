// <auto-generated />
using System;
using ControlNotas.API.Modelos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ControlNotas.API.Migrations
{
    [DbContext(typeof(ProyectoControlNotasDbContext))]
    [Migration("20230324045952_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("ControlNotas.API.Modelos.Docente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Docentes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Lozada",
                            Cedula = "1011223344",
                            Correo = "roberto@upecu.edu.ec",
                            Nombres = "Roberto",
                            Tipo = 1,
                            Usuario = "roberto"
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "Lozada",
                            Cedula = "1111223344",
                            Correo = "franklin@upecu.edu.ec",
                            Nombres = "Franklin",
                            Tipo = 1,
                            Usuario = "franklin"
                        },
                        new
                        {
                            Id = 3,
                            Apellidos = "Lozada",
                            Cedula = "1211223344",
                            Correo = "alexander@upecu.edu.ec",
                            Nombres = "Alexander",
                            Tipo = 2,
                            Usuario = "alexander"
                        },
                        new
                        {
                            Id = 4,
                            Apellidos = "Tipán",
                            Cedula = "1311223344",
                            Correo = "fernando@upecu.edu.ec",
                            Nombres = "Fernando",
                            Tipo = 3,
                            Usuario = "fernando"
                        },
                        new
                        {
                            Id = 5,
                            Apellidos = "Sánchez",
                            Cedula = "1411223344",
                            Correo = "diego@upecu.edu.ec",
                            Nombres = "Diego",
                            Tipo = 3,
                            Usuario = "diego"
                        });
                });

            modelBuilder.Entity("ControlNotas.API.Modelos.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Estudiantes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Lozada",
                            Cedula = "1711223344",
                            Correo = "roberto@upecu.edu.ec",
                            Nombres = "Roberto",
                            Usuario = "roberto"
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "Lozada",
                            Cedula = "1811223344",
                            Correo = "franklin@upecu.edu.ec",
                            Nombres = "Franklin",
                            Usuario = "franklin"
                        },
                        new
                        {
                            Id = 3,
                            Apellidos = "Lozada",
                            Cedula = "1911223344",
                            Correo = "alexander@upecu.edu.ec",
                            Nombres = "Alexander",
                            Usuario = "alexander"
                        },
                        new
                        {
                            Id = 4,
                            Apellidos = "Tipán",
                            Cedula = "2011223344",
                            Correo = "fernando@upecu.edu.ec",
                            Nombres = "Fernando",
                            Usuario = "fernando"
                        },
                        new
                        {
                            Id = 5,
                            Apellidos = "Sánchez",
                            Cedula = "2111223344",
                            Correo = "diego@upecu.edu.ec",
                            Nombres = "Diego",
                            Usuario = "diego"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12753439-c981-4edc-90ef-1c9327ea07e6",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "9155f87f-7fae-494e-8409-b133f56964dd",
                            Name = "Coordinador",
                            NormalizedName = "COORDINADOR"
                        },
                        new
                        {
                            Id = "8c65a483-2354-4cd1-bff6-a54e51917833",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "48efcce9-184c-4d5a-82e2-09eb20dd481d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00b7bb29-5560-4c51-846e-9be951ca10ea",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENFq984IcHQPRYhpRozbR+5sE2ShjmdN+qAPrih4McFQi61kvyzLEGC50I+eeu0YJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7234d9e-4e72-4262-969c-04f70c8351f8",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "dec25a1a-f00d-46cc-9279-1efb101ffffa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a157788-cdb6-4cac-a891-cb3f96d23766",
                            Email = "coordinador@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COORDINADOR@LOCALHOST.COM",
                            NormalizedUserName = "COORDINADOR@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECcPqGi/dRAWjfnrMHaQlrjBHqFXutHWaPVQN2iGYFEdJ078QWBnibu7gNkyzX90Lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f18cba3f-c2fe-4a78-ab2c-b68766baec77",
                            TwoFactorEnabled = false,
                            UserName = "coordinador@localhost.com"
                        },
                        new
                        {
                            Id = "aa45eba9-da45-40bb-aa31-641968f00818",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7f45fef-d4da-49ff-985c-507dab368e17",
                            Email = "usuario@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USUARIO@LOCALHOST.COM",
                            NormalizedUserName = "USUARIO@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDKpUvcOwXyaU3oirXm9QE98FNr3OD0Z9t54IajL+RbnKXTGnZlU2ygHPref3ac0ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f82dacd-d3e4-4fc4-8431-777b62c9cfd8",
                            TwoFactorEnabled = false,
                            UserName = "usuario@localhost.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "48efcce9-184c-4d5a-82e2-09eb20dd481d",
                            RoleId = "12753439-c981-4edc-90ef-1c9327ea07e6"
                        },
                        new
                        {
                            UserId = "dec25a1a-f00d-46cc-9279-1efb101ffffa",
                            RoleId = "9155f87f-7fae-494e-8409-b133f56964dd"
                        },
                        new
                        {
                            UserId = "aa45eba9-da45-40bb-aa31-641968f00818",
                            RoleId = "8c65a483-2354-4cd1-bff6-a54e51917833"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
